plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "1.2.1"
	//id 'com.matthewprenger.cursegradle' version '1.4.0'
}
import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version + "-polymerport." + project.sub_version
group = project.maven_group

repositories {
	maven { url = "https://www.cursemaven.com" }
	maven { url = "https://maven.nucleoid.xyz" }
}

dependencies {
	implementation 'org.jetbrains:annotations:22.0.0'

	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modCompileOnly 'curse.maven:repurposed-structures-fabric-391366:3542863'

	modImplementation include("eu.pb4:sgui:1.0.0-rc6+1.18-pre5")
	modImplementation include("eu.pb4:hologram-api:0.2.1+1.18-pre5")
	modImplementation include("eu.pb4:polymer:0.2.0-beta.25+1.18.1")
	modImplementation include("fr.catcore:server-translations-api:1.4.8+1.18-pre1")
}

loom {
	accessWidenerPath = file("src/main/resources/waystones.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
	}
}


/*curseforge {
	if (System.getenv("CURSEFORGE")) {
		apiKey = System.getenv("CURSEFORGE")

		project {
			id = "572651"
			releaseType = "release"
			changelog = System.getenv("CHANGELOG")
			changelogType = "markdown"
			addGameVersion ((String) project.minecraft_version)
			addGameVersion "Fabric"
			mainArtifact(remapJar)

			afterEvaluate {
				uploadTask.dependsOn("remapJar")
			}
		}
	}

	options {
		forgeGradleIntegration = false
	}
}*/

task publishModrinth (type: TaskModrinthUpload){
	onlyIf {
		System.getenv("MODRINTH")
	}

	token = System.getenv("MODRINTH")
	projectId = 'gU9Ao8K2'
	versionNumber = version
	versionType = VersionType.RELEASE
	changelog = System.getenv("CHANGELOG")
	// On fabric, use 'remapJar' instead of 'jar'
	uploadFile = remapJar
	addGameVersion((String) project.minecraft_version)
	addLoader('fabric')
}
